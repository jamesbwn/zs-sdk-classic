{"version":3,"file":"ks-sdk-classic.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// // exports for external consumption\r\n// export type BigintIsh = JSBI | bigint | string\r\n\r\n// export enum ChainId {\r\n//   MAINNET = 1,\r\n//   ROPSTEN = 3,\r\n//   RINKEBY = 4,\r\n//   GÃ–RLI = 5,\r\n//   KOVAN = 42,\r\n//   MATIC = 137,\r\n//   MUMBAI = 80001,\r\n//   BSCTESTNET = 97,\r\n//   BSCMAINNET = 56,\r\n//   AVAXTESTNET = 43113,\r\n//   AVAXMAINNET = 43114,\r\n//   FANTOM = 250,\r\n//   CRONOSTESTNET = 338,\r\n//   CRONOS = 25,\r\n//   AURORA = 1313161554\r\n// }\r\n\r\n// export enum TradeType {\r\n//   EXACT_INPUT,\r\n//   EXACT_OUTPUT\r\n// }\r\n\r\n// export enum Rounding {\r\n//   ROUND_DOWN,\r\n//   ROUND_HALF_UP,\r\n//   ROUND_UP\r\n// }\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const PRECISION = JSBI.BigInt(1e18)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import { Token, Price, TokenAmount, BigintIsh, sqrt, ChainId } from '@kyberswap/ks-sdk-core'\r\n// import { TokenAmount, Price } from './fractions'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { MINIMUM_LIQUIDITY, ZERO, ONE, PRECISION } from '../constants'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\n// import { Token } from './token'\r\n\r\n//TODO: rename to Pool object\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n  private readonly virtualTokenAmounts: [TokenAmount, TokenAmount]\r\n  public readonly fee: JSBI\r\n  public readonly address: string\r\n  public readonly amp: JSBI\r\n\r\n  public constructor(\r\n    address: string,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount,\r\n    virtualTokenAmountA: TokenAmount,\r\n    virtualTokenAmountB: TokenAmount,\r\n    fee: JSBI,\r\n    amp: JSBI\r\n  ) {\r\n    this.address = address\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    const virtualTokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [virtualTokenAmountA, virtualTokenAmountB]\r\n      : [virtualTokenAmountB, virtualTokenAmountA]\r\n\r\n    this.liquidityToken = new Token(tokenAmounts[0].currency.chainId, address, 18, 'DMM-LP', 'DMM LP')\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n    this.virtualTokenAmounts = virtualTokenAmounts as [TokenAmount, TokenAmount]\r\n    this.fee = fee\r\n    this.amp = amp\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.virtualTokenAmounts[1].divide(this.virtualTokenAmounts[0])\r\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.virtualTokenAmounts[0].divide(this.virtualTokenAmounts[1])\r\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  public priceOfReal(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    const r1 = this.tokenAmounts[1].divide(this.tokenAmounts[0])\r\n    const r2 = this.tokenAmounts[0].divide(this.tokenAmounts[1])\r\n    return token.equals(this.token0)\r\n      ? new Price(this.token0, this.token1, r1.denominator, r1.numerator)\r\n      : new Price(this.token1, this.token0, r2.denominator, r2.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public get virtualReserve0(): TokenAmount {\r\n    return this.virtualTokenAmounts[0]\r\n  }\r\n\r\n  public get virtualReserve1(): TokenAmount {\r\n    return this.virtualTokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public virtualReserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.virtualReserve0 : this.virtualReserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const outputToken = inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\r\n    const inputReserve = this.virtualReserveOf(inputAmount.currency)\r\n    const outputReserve = this.virtualReserveOf(outputToken)\r\n    const inputAmountWithFee = JSBI.divide(\r\n      JSBI.multiply(inputAmount.quotient, JSBI.subtract(PRECISION, this.fee)),\r\n      PRECISION\r\n    )\r\n    \r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\r\n    const denominator = JSBI.add(inputReserve.quotient, inputAmountWithFee)\r\n    const outputAmount = TokenAmount.fromRawAmount(outputToken, JSBI.divide(numerator, denominator))\r\n    if (JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputToken).quotient)) {\r\n      console.log('debug get out st4 throw1::', outputAmount.quotient.toString(), this.reserveOf(outputToken).quotient.toString())\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\r\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const inputToken = outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\r\n\r\n    const outputReserve = this.virtualReserveOf(outputAmount.currency)\r\n    const inputReserve = this.virtualReserveOf(inputToken)\r\n    ///\r\n    let numerator = JSBI.multiply(inputReserve.quotient, outputAmount.quotient)\r\n    let denominator = JSBI.subtract(outputReserve.quotient, outputAmount.quotient)\r\n    const inputAmountWithFee = JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n\r\n    numerator = JSBI.multiply(inputAmountWithFee, PRECISION)\r\n    denominator = JSBI.subtract(PRECISION, this.fee)\r\n\r\n    const inputAmount = TokenAmount.fromRawAmount(\r\n      inputToken,\r\n      JSBI.divide(JSBI.subtract(JSBI.add(numerator, denominator), ONE), denominator)\r\n    )\r\n    return [inputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      )\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return TokenAmount.fromRawAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeBps: JSBI = ZERO,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (JSBI.equal(feeBps, ZERO)) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = JSBI.BigInt(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.virtualReserve0.quotient, this.virtualReserve1.quotient))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast)), feeBps)\r\n          const denominator = JSBI.multiply(JSBI.add(rootK, rootKLast), JSBI.BigInt(5000))\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(TokenAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return TokenAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\r\n    )\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// import { Currency, ETHER } from './currency'\r\n// import { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\n// import { Price } from './fractions/price'\r\nimport { ChainId, Token, Price, Currency } from '@kyberswap/ks-sdk-core'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n  // public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    const wrappedInput = input.wrapped\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(pair.priceOf(this.path[i]))\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ONE, ZERO } from '../constants'\r\n// import { sortedInsert } from '../utils'\r\n// import { Currency, ETHER } from './currency'\r\nimport {\r\n  CurrencyAmount,\r\n  Currency,\r\n  Price,\r\n  Percent,\r\n  TradeType,\r\n  TokenAmount,\r\n  Fraction,\r\n  sortedInsert,\r\n  computePriceImpact\r\n} from '@kyberswap/ks-sdk-core'\r\n// import { Fraction } from './fractions/fraction'\r\n// import { Percent } from './fractions/percent'\r\n// import { Price } from './fractions/price'\r\n// import { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\n// import { currencyEquals, Token, WETH } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\n// export function computePriceImpact(\r\n//   midPrice: Price,\r\n//   inputAmount: CurrencyAmount,\r\n//   outputAmount: CurrencyAmount\r\n// ): Percent {\r\n//   const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n//   // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n//   const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n//   return new Percent(slippage.numerator, slippage.denominator)\r\n// }\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  //vutien\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\n// function wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n//   if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n//   if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n//   invariant(false, 'CURRENCY')\r\n// }\r\n\r\n// function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n//   if (currency instanceof Token) return currency\r\n//   if (currency === ETHER) return WETH[chainId]\r\n//   invariant(false, 'CURRENCY')\r\n// }\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  // public readonly nextMidPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    const tokenAmounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextInputReserves: TokenAmount[] = new Array(route.pairs.length)\r\n    const nextOutputReserves: TokenAmount[] = new Array(route.pairs.length)\r\n\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT')\r\n      tokenAmounts[0] = amount.wrapped\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(tokenAmounts[i])\r\n\r\n        tokenAmounts[i + 1] = outputAmount\r\n        nextInputReserves[i] = nextPair[0]\r\n        nextOutputReserves[i] = nextPair[1]\r\n      }\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n        nextInputReserves[i - 1] = nextPair[0]\r\n        nextOutputReserves[i - 1] = nextPair[1]\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n        : CurrencyAmount.fromFractionalAmount(route.input, tokenAmounts[0].numerator, tokenAmounts[0].denominator)\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n        : CurrencyAmount.fromFractionalAmount(\r\n            route.output,\r\n            tokenAmounts[tokenAmounts.length - 1].numerator,\r\n            tokenAmounts[tokenAmounts.length - 1].denominator\r\n          )\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    // this.nextMidPrice = Price.fromReserves(nextInputReserves, nextOutputReserves)\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\r\n        .quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[][],\r\n    originalAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    currencyAmountIn: CurrencyAmount<Currency> = originalAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    // const chainId: ChainId | undefined =\r\n    //   currencyAmountIn instanceof TokenAmount\r\n    //     ? currencyAmountIn.token.chainId\r\n    //     : currencyOut instanceof Token\r\n    //     ? currencyOut.chainId\r\n    //     : undefined\r\n    // invariant(chainId !== undefined, 'CHAIN_ID')\r\n    const amountIn = currencyAmountIn.wrapped\r\n    const tokenOut = currencyOut.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      invariant(pair.length > 0, 'PAIRS')\r\n\r\n      // pair irrelevant\r\n      if (!pair[0].token0.equals(amountIn.currency) && !pair[0].token1.equals(amountIn.currency)) continue\r\n      const token0 = pair[0].token0\r\n      const token1 = pair[0].token1\r\n      // iterate each pool, find the best rate\r\n      let bestPool: Pair | undefined\r\n      let bestAmountOut: TokenAmount | undefined\r\n      for (let j = 0; j < pair.length; j++) {\r\n        const pool = pair[j]\r\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\r\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\r\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\r\n        let amountOut: TokenAmount\r\n        try {\r\n          ;[amountOut] = pool.getOutputAmount(amountIn)\r\n        } catch (error) {\r\n          // input too low || not enough liquidity in this pair\r\n          \r\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\r\n            continue\r\n          }\r\n          throw error\r\n        }\r\n        if (bestAmountOut === undefined) {\r\n          bestAmountOut = amountOut\r\n          bestPool = pool\r\n        } else {\r\n          if (amountOut.greaterThan(bestAmountOut)) {\r\n            bestAmountOut = amountOut\r\n            bestPool = pool\r\n          }\r\n        }\r\n      }\r\n\r\n      // not found any pool has rate\r\n\r\n      if (bestAmountOut === undefined || bestPool === undefined) {\r\n        continue\r\n      }\r\n\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (bestAmountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, bestPool], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          originalAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, bestPool],\r\n          bestAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[][],\r\n    currencyIn: TInput,\r\n    originalAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    currencyAmountOut: CurrencyAmount<Currency> = originalAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    // const chainId: ChainId | undefined =\r\n    //   currencyAmountOut instanceof TokenAmount\r\n    //     ? currencyAmountOut.token.chainId\r\n    //     : currencyIn instanceof Token\r\n    //     ? currencyIn.chainId\r\n    //     : undefined\r\n    // invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = currencyAmountOut.wrapped\r\n    const tokenIn = currencyIn.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n\r\n      invariant(pair.length > 0, 'PAIRS')\r\n\r\n      // pair irrelevant\r\n      if (!pair[0].token0.equals(amountOut.currency) && !pair[0].token1.equals(amountOut.currency)) continue\r\n      const token0 = pair[0].token0\r\n      const token1 = pair[0].token1\r\n\r\n      // iterate each pool, find the best rate\r\n      let bestPool: Pair | undefined\r\n      let bestAmountIn: TokenAmount | undefined\r\n      for (let j = 0; j < pair.length; j++) {\r\n        let pool = pair[j]\r\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\r\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\r\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\r\n\r\n        let amountIn: TokenAmount\r\n        try {\r\n          ;[amountIn] = pool.getInputAmount(amountOut)\r\n        } catch (error) {\r\n          // input too low || not enough liquidity in this pair\r\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\r\n            continue\r\n          }\r\n          throw error\r\n        }\r\n\r\n        if (bestAmountIn === undefined) {\r\n          bestAmountIn = amountIn\r\n          bestPool = pool\r\n        } else {\r\n          if (amountIn.lessThan(bestAmountIn)) {\r\n            bestAmountIn = amountIn\r\n            bestPool = pool\r\n          }\r\n        }\r\n      }\r\n\r\n      // not found any pool has rate\r\n      if (bestAmountIn === undefined || bestPool === undefined) {\r\n        continue\r\n      }\r\n\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (bestAmountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([bestPool, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          originalAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [bestPool, ...currentPairs],\r\n          bestAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency, CurrencyAmount, Percent, validateAndParseAddress, TradeType } from '@kyberswap/ks-sdk-core'\r\nimport { Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the DmmExchange Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the DmmExchange Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the DmmExchange Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isNative\r\n    const etherOut = trade.outputAmount.currency.isNative\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const pairsPath: string[] = trade.route.pairs.map(pair => pair.address)\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    console.log('debug route st1::', pairsPath, path)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, pairsPath, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, pairsPath, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { Token, TokenAmount } from '@kyberswap/ks-sdk-core'\r\nimport { Pair } from './entities/pair'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport DMMFactory from './abis/DMMFactory.json'\r\nimport DMMPool from './abis/DMMPool.json'\r\n\r\nimport { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { JSBI } from '.'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\nlet PAIR_ADDRESS_CACHE: { [chainId: number]: { [token0Address: string]: { [token1Address: string]: string[] } } } = {}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about pairs and constructs pairs array from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param factoryAddress address of dmmFactory\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    factoryAddress: string,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair[]> {\r\n    const addresses = await Fetcher.fetchPairAddresses(tokenA, tokenB, factoryAddress, provider)\r\n    return Promise.all(\r\n      addresses.map(async address => {\r\n        let poolContract = new Contract(address, DMMPool.abi, provider)\r\n        const [reserve0, reserve1, vReserve0, vReserve1, feeInPrecision] = await poolContract.getTradeInfo()\r\n        const ampBps = await poolContract.ampBps()\r\n        const balances = tokenA.sortsBefore(tokenB)\r\n          ? [reserve0, reserve1, vReserve0, vReserve1]\r\n          : [reserve1, reserve0, vReserve1, vReserve0]\r\n        return new Pair(\r\n          address,\r\n          TokenAmount.fromRawAmount(tokenA, balances[0]),\r\n          TokenAmount.fromRawAmount(tokenB, balances[1]),\r\n          TokenAmount.fromRawAmount(tokenA, balances[2]),\r\n          TokenAmount.fromRawAmount(tokenB, balances[3]),\r\n          JSBI.BigInt(feeInPrecision),\r\n          JSBI.BigInt(ampBps)\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Fetches information about pair addresses from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairAddresses(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    factoryAddress: string,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<string[]> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n    const chainId = tokenA.chainId\r\n    if (typeof PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[1].address]?.[tokenB.address] == 'undefined') {\r\n      const factory = await new Contract(factoryAddress, DMMFactory.abi, provider)\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [chainId]: {\r\n          ...PAIR_ADDRESS_CACHE?.[chainId],\r\n          [tokens[0].address]: {\r\n            ...PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[0].address],\r\n            [tokens[1].address]: await factory.getPools(tokens[0].address, tokens[1].address)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return PAIR_ADDRESS_CACHE[chainId][tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n"],"names":["SolidityType","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","TEN","_100","PRECISION","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Pair","address","tokenAmountA","tokenAmountB","virtualTokenAmountA","virtualTokenAmountB","fee","amp","tokenAmounts","currency","sortsBefore","virtualTokenAmounts","liquidityToken","Token","chainId","involvesToken","token","equals","this","token0","token1","priceOf","invariant","token0Price","token1Price","priceOfReal","r1","divide","r2","Price","denominator","numerator","reserveOf","reserve0","reserve1","virtualReserveOf","virtualReserve0","virtualReserve1","getOutputAmount","inputAmount","equal","quotient","outputToken","inputReserve","outputReserve","inputAmountWithFee","multiply","subtract","add","outputAmount","TokenAmount","fromRawAmount","greaterThanOrEqual","console","log","toString","getInputAmount","inputToken","getLiquidityMinted","totalSupply","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeBps","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","nextInputReserves","nextOutputReserves","TradeType","EXACT_INPUT","i","nextPair","CurrencyAmount","fromFractionalAmount","EXACT_OUTPUT","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","originalAmountIn","currencyOut","currentPairs","currencyAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","bestPool","bestAmountOut","j","pool","error","isInsufficientInputAmountError","isInsufficientReservesError","undefined","sortedInsert","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","originalAmountOut","currencyAmountOut","tokenIn","bestAmountIn","toHex","currencyAmount","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","pairsPath","map","methodName","args","value","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","ChainId","MAINNET","PAIR_ADDRESS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","decimals","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","tokenA","tokenB","factoryAddress","fetchPairAddresses","addresses","Promise","all","poolContract","DMMPool","abi","getTradeInfo","vReserve0","vReserve1","feeInPrecision","ampBps","balances","tokens","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$_","_PAIR_ADDRESS_CACHE$_2","DMMFactory","factory","getPools","_PAIR_ADDRESS_CACHE2","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$"],"mappings":"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"}