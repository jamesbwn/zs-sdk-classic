{"version":3,"file":"ks-sdk-classic.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// // exports for external consumption\r\n// export type BigintIsh = JSBI | bigint | string\r\n\r\n// export enum ChainId {\r\n//   MAINNET = 1,\r\n//   ROPSTEN = 3,\r\n//   RINKEBY = 4,\r\n//   GÃ–RLI = 5,\r\n//   KOVAN = 42,\r\n//   MATIC = 137,\r\n//   MUMBAI = 80001,\r\n//   BSCTESTNET = 97,\r\n//   BSCMAINNET = 56,\r\n//   AVAXTESTNET = 43113,\r\n//   AVAXMAINNET = 43114,\r\n//   FANTOM = 250,\r\n//   CRONOSTESTNET = 338,\r\n//   CRONOS = 25,\r\n//   AURORA = 1313161554\r\n// }\r\n\r\n// export enum TradeType {\r\n//   EXACT_INPUT,\r\n//   EXACT_OUTPUT\r\n// }\r\n\r\n// export enum Rounding {\r\n//   ROUND_DOWN,\r\n//   ROUND_HALF_UP,\r\n//   ROUND_UP\r\n// }\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const PRECISION = JSBI.BigInt(1e18)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import { Token, Price, TokenAmount, BigintIsh, sqrt, ChainId } from '@kyberswap/ks-sdk-core'\r\n// import { TokenAmount, Price } from './fractions'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { MINIMUM_LIQUIDITY, ZERO, ONE, PRECISION } from '../constants'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\n// import { Token } from './token'\r\n\r\n//TODO: rename to Pool object\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n  private readonly virtualTokenAmounts: [TokenAmount, TokenAmount]\r\n  public readonly fee: JSBI\r\n  public readonly address: string\r\n  public readonly amp: JSBI\r\n\r\n  public constructor(\r\n    address: string,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount,\r\n    virtualTokenAmountA: TokenAmount,\r\n    virtualTokenAmountB: TokenAmount,\r\n    fee: JSBI,\r\n    amp: JSBI\r\n  ) {\r\n    this.address = address\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    const virtualTokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [virtualTokenAmountA, virtualTokenAmountB]\r\n      : [virtualTokenAmountB, virtualTokenAmountA]\r\n\r\n    this.liquidityToken = new Token(tokenAmounts[0].currency.chainId, address, 18, 'DMM-LP', 'DMM LP')\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n    this.virtualTokenAmounts = virtualTokenAmounts as [TokenAmount, TokenAmount]\r\n    this.fee = fee\r\n    this.amp = amp\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.virtualTokenAmounts[1].divide(this.virtualTokenAmounts[0])\r\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.virtualTokenAmounts[0].divide(this.virtualTokenAmounts[1])\r\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  public priceOfReal(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    const r1 = this.tokenAmounts[1].divide(this.tokenAmounts[0])\r\n    const r2 = this.tokenAmounts[0].divide(this.tokenAmounts[1])\r\n    return token.equals(this.token0)\r\n      ? new Price(this.token0, this.token1, r1.denominator, r1.numerator)\r\n      : new Price(this.token1, this.token0, r2.denominator, r2.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public get virtualReserve0(): TokenAmount {\r\n    return this.virtualTokenAmounts[0]\r\n  }\r\n\r\n  public get virtualReserve1(): TokenAmount {\r\n    return this.virtualTokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public virtualReserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.virtualReserve0 : this.virtualReserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const outputToken = inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\r\n    const inputReserve = this.virtualReserveOf(inputAmount.currency)\r\n    const outputReserve = this.virtualReserveOf(outputToken)\r\n    const inputAmountWithFee = JSBI.divide(\r\n      JSBI.multiply(inputAmount.quotient, JSBI.subtract(PRECISION, this.fee)),\r\n      PRECISION\r\n    )\r\n    \r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\r\n    const denominator = JSBI.add(inputReserve.quotient, inputAmountWithFee)\r\n    const outputAmount = TokenAmount.fromRawAmount(outputToken, JSBI.divide(numerator, denominator))\r\n    if (JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputToken).quotient)) {\r\n      console.log('debug get out st4 throw1::', outputAmount.quotient.toString(), this.reserveOf(outputToken).quotient.toString())\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\r\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const inputToken = outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\r\n\r\n    const outputReserve = this.virtualReserveOf(outputAmount.currency)\r\n    const inputReserve = this.virtualReserveOf(inputToken)\r\n    ///\r\n    let numerator = JSBI.multiply(inputReserve.quotient, outputAmount.quotient)\r\n    let denominator = JSBI.subtract(outputReserve.quotient, outputAmount.quotient)\r\n    const inputAmountWithFee = JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n\r\n    numerator = JSBI.multiply(inputAmountWithFee, PRECISION)\r\n    denominator = JSBI.subtract(PRECISION, this.fee)\r\n\r\n    const inputAmount = TokenAmount.fromRawAmount(\r\n      inputToken,\r\n      JSBI.divide(JSBI.subtract(JSBI.add(numerator, denominator), ONE), denominator)\r\n    )\r\n    return [inputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      )\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return TokenAmount.fromRawAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeBps: JSBI = ZERO,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (JSBI.equal(feeBps, ZERO)) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = JSBI.BigInt(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.virtualReserve0.quotient, this.virtualReserve1.quotient))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast)), feeBps)\r\n          const denominator = JSBI.multiply(JSBI.add(rootK, rootKLast), JSBI.BigInt(5000))\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(TokenAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return TokenAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\r\n    )\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// import { Currency, ETHER } from './currency'\r\n// import { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\n// import { Price } from './fractions/price'\r\nimport { ChainId, Token, Price, Currency } from '@kyberswap/ks-sdk-core'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n  // public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    const wrappedInput = input.wrapped\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(pair.priceOf(this.path[i]))\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ONE, ZERO } from '../constants'\r\n// import { sortedInsert } from '../utils'\r\n// import { Currency, ETHER } from './currency'\r\nimport {\r\n  CurrencyAmount,\r\n  Currency,\r\n  Price,\r\n  Percent,\r\n  TradeType,\r\n  TokenAmount,\r\n  Fraction,\r\n  sortedInsert,\r\n  computePriceImpact\r\n} from '@kyberswap/ks-sdk-core'\r\n// import { Fraction } from './fractions/fraction'\r\n// import { Percent } from './fractions/percent'\r\n// import { Price } from './fractions/price'\r\n// import { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\n// import { currencyEquals, Token, WETH } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\n// export function computePriceImpact(\r\n//   midPrice: Price,\r\n//   inputAmount: CurrencyAmount,\r\n//   outputAmount: CurrencyAmount\r\n// ): Percent {\r\n//   const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n//   // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n//   const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n//   return new Percent(slippage.numerator, slippage.denominator)\r\n// }\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  //vutien\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\n// function wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n//   if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n//   if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n//   invariant(false, 'CURRENCY')\r\n// }\r\n\r\n// function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n//   if (currency instanceof Token) return currency\r\n//   if (currency === ETHER) return WETH[chainId]\r\n//   invariant(false, 'CURRENCY')\r\n// }\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  // public readonly nextMidPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    const tokenAmounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextInputReserves: TokenAmount[] = new Array(route.pairs.length)\r\n    const nextOutputReserves: TokenAmount[] = new Array(route.pairs.length)\r\n\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT')\r\n      tokenAmounts[0] = amount.wrapped\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(tokenAmounts[i])\r\n\r\n        tokenAmounts[i + 1] = outputAmount\r\n        nextInputReserves[i] = nextPair[0]\r\n        nextOutputReserves[i] = nextPair[1]\r\n      }\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n        nextInputReserves[i - 1] = nextPair[0]\r\n        nextOutputReserves[i - 1] = nextPair[1]\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n        : CurrencyAmount.fromFractionalAmount(route.input, tokenAmounts[0].numerator, tokenAmounts[0].denominator)\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n        : CurrencyAmount.fromFractionalAmount(\r\n            route.output,\r\n            tokenAmounts[tokenAmounts.length - 1].numerator,\r\n            tokenAmounts[tokenAmounts.length - 1].denominator\r\n          )\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    // this.nextMidPrice = Price.fromReserves(nextInputReserves, nextOutputReserves)\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\r\n        .quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[][],\r\n    originalAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    currencyAmountIn: CurrencyAmount<Currency> = originalAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    // const chainId: ChainId | undefined =\r\n    //   currencyAmountIn instanceof TokenAmount\r\n    //     ? currencyAmountIn.token.chainId\r\n    //     : currencyOut instanceof Token\r\n    //     ? currencyOut.chainId\r\n    //     : undefined\r\n    // invariant(chainId !== undefined, 'CHAIN_ID')\r\n    const amountIn = currencyAmountIn.wrapped\r\n    const tokenOut = currencyOut.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      invariant(pair.length > 0, 'PAIRS')\r\n\r\n      // pair irrelevant\r\n      if (!pair[0].token0.equals(amountIn.currency) && !pair[0].token1.equals(amountIn.currency)) continue\r\n      const token0 = pair[0].token0\r\n      const token1 = pair[0].token1\r\n      // iterate each pool, find the best rate\r\n      let bestPool: Pair | undefined\r\n      let bestAmountOut: TokenAmount | undefined\r\n      for (let j = 0; j < pair.length; j++) {\r\n        const pool = pair[j]\r\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\r\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\r\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\r\n        let amountOut: TokenAmount\r\n        try {\r\n          ;[amountOut] = pool.getOutputAmount(amountIn)\r\n        } catch (error) {\r\n          // input too low || not enough liquidity in this pair\r\n          \r\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\r\n            continue\r\n          }\r\n          throw error\r\n        }\r\n        if (bestAmountOut === undefined) {\r\n          bestAmountOut = amountOut\r\n          bestPool = pool\r\n        } else {\r\n          if (amountOut.greaterThan(bestAmountOut)) {\r\n            bestAmountOut = amountOut\r\n            bestPool = pool\r\n          }\r\n        }\r\n      }\r\n\r\n      // not found any pool has rate\r\n\r\n      if (bestAmountOut === undefined || bestPool === undefined) {\r\n        continue\r\n      }\r\n\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (bestAmountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, bestPool], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          originalAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, bestPool],\r\n          bestAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[][],\r\n    currencyIn: TInput,\r\n    originalAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    currencyAmountOut: CurrencyAmount<Currency> = originalAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    // const chainId: ChainId | undefined =\r\n    //   currencyAmountOut instanceof TokenAmount\r\n    //     ? currencyAmountOut.token.chainId\r\n    //     : currencyIn instanceof Token\r\n    //     ? currencyIn.chainId\r\n    //     : undefined\r\n    // invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = currencyAmountOut.wrapped\r\n    const tokenIn = currencyIn.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n\r\n      invariant(pair.length > 0, 'PAIRS')\r\n\r\n      // pair irrelevant\r\n      if (!pair[0].token0.equals(amountOut.currency) && !pair[0].token1.equals(amountOut.currency)) continue\r\n      const token0 = pair[0].token0\r\n      const token1 = pair[0].token1\r\n\r\n      // iterate each pool, find the best rate\r\n      let bestPool: Pair | undefined\r\n      let bestAmountIn: TokenAmount | undefined\r\n      for (let j = 0; j < pair.length; j++) {\r\n        let pool = pair[j]\r\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\r\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\r\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\r\n\r\n        let amountIn: TokenAmount\r\n        try {\r\n          ;[amountIn] = pool.getInputAmount(amountOut)\r\n        } catch (error) {\r\n          // input too low || not enough liquidity in this pair\r\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\r\n            continue\r\n          }\r\n          throw error\r\n        }\r\n\r\n        if (bestAmountIn === undefined) {\r\n          bestAmountIn = amountIn\r\n          bestPool = pool\r\n        } else {\r\n          if (amountIn.lessThan(bestAmountIn)) {\r\n            bestAmountIn = amountIn\r\n            bestPool = pool\r\n          }\r\n        }\r\n      }\r\n\r\n      // not found any pool has rate\r\n      if (bestAmountIn === undefined || bestPool === undefined) {\r\n        continue\r\n      }\r\n\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (bestAmountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([bestPool, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          originalAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [bestPool, ...currentPairs],\r\n          bestAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency, CurrencyAmount, Percent, validateAndParseAddress, TradeType } from '@kyberswap/ks-sdk-core'\r\nimport { Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the DmmExchange Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the DmmExchange Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the DmmExchange Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isNative\r\n    const etherOut = trade.outputAmount.currency.isNative\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const pairsPath: string[] = trade.route.pairs.map(pair => pair.address)\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    console.log('debug route st1::', pairsPath, path)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, pairsPath, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, pairsPath, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { Token, TokenAmount } from '@kyberswap/ks-sdk-core'\r\nimport { Pair } from './entities/pair'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport DMMFactory from './abis/DMMFactory.json'\r\nimport DMMPool from './abis/DMMPool.json'\r\n\r\nimport { ChainId } from '@kyberswap/ks-sdk-core'\r\nimport { JSBI } from '.'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\nlet PAIR_ADDRESS_CACHE: { [chainId: number]: { [token0Address: string]: { [token1Address: string]: string[] } } } = {}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about pairs and constructs pairs array from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param factoryAddress address of dmmFactory\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    factoryAddress: string,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair[]> {\r\n    const addresses = await Fetcher.fetchPairAddresses(tokenA, tokenB, factoryAddress, provider)\r\n    return Promise.all(\r\n      addresses.map(async address => {\r\n        let poolContract = new Contract(address, DMMPool.abi, provider)\r\n        const [reserve0, reserve1, vReserve0, vReserve1, feeInPrecision] = await poolContract.getTradeInfo()\r\n        const ampBps = await poolContract.ampBps()\r\n        const balances = tokenA.sortsBefore(tokenB)\r\n          ? [reserve0, reserve1, vReserve0, vReserve1]\r\n          : [reserve1, reserve0, vReserve1, vReserve0]\r\n        return new Pair(\r\n          address,\r\n          TokenAmount.fromRawAmount(tokenA, balances[0]),\r\n          TokenAmount.fromRawAmount(tokenB, balances[1]),\r\n          TokenAmount.fromRawAmount(tokenA, balances[2]),\r\n          TokenAmount.fromRawAmount(tokenB, balances[3]),\r\n          JSBI.BigInt(feeInPrecision),\r\n          JSBI.BigInt(ampBps)\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Fetches information about pair addresses from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairAddresses(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    factoryAddress: string,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<string[]> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n    const chainId = tokenA.chainId\r\n    if (typeof PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[1].address]?.[tokenB.address] == 'undefined') {\r\n      const factory = await new Contract(factoryAddress, DMMFactory.abi, provider)\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [chainId]: {\r\n          ...PAIR_ADDRESS_CACHE?.[chainId],\r\n          [tokens[0].address]: {\r\n            ...PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[0].address],\r\n            [tokens[1].address]: await factory.getPools(tokens[0].address, tokens[1].address)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return PAIR_ADDRESS_CACHE[chainId][tokens[0].address][tokens[1].address]\r\n  }\r\n}\r\n"],"names":["MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","TEN","_100","PRECISION","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Pair","address","tokenAmountA","tokenAmountB","virtualTokenAmountA","virtualTokenAmountB","fee","amp","tokenAmounts","currency","sortsBefore","virtualTokenAmounts","liquidityToken","Token","chainId","involvesToken","token","equals","token0","token1","priceOf","invariant","token0Price","token1Price","priceOfReal","r1","divide","r2","Price","denominator","numerator","reserveOf","reserve0","reserve1","virtualReserveOf","virtualReserve0","virtualReserve1","getOutputAmount","inputAmount","equal","quotient","outputToken","inputReserve","outputReserve","inputAmountWithFee","multiply","subtract","add","outputAmount","TokenAmount","fromRawAmount","greaterThanOrEqual","console","log","toString","getInputAmount","inputToken","getLiquidityMinted","totalSupply","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeBps","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","nextInputReserves","nextOutputReserves","TradeType","EXACT_INPUT","nextPair","CurrencyAmount","fromFractionalAmount","EXACT_OUTPUT","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","originalAmountIn","currencyOut","currentPairs","currencyAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","bestPool","bestAmountOut","j","pool","error","isInsufficientInputAmountError","isInsufficientReservesError","undefined","sortedInsert","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","originalAmountOut","currencyAmountOut","tokenIn","bestAmountIn","toHex","currencyAmount","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","pairsPath","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value","TOKEN_DECIMALS_CACHE","ChainId","MAINNET","PAIR_ADDRESS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","decimals","then","fetchPairData","tokenA","tokenB","factoryAddress","fetchPairAddresses","addresses","Promise","all","poolContract","DMMPool","abi","getTradeInfo","vReserve0","vReserve1","feeInPrecision","ampBps","balances","tokens","DMMFactory","factory","getPools"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}